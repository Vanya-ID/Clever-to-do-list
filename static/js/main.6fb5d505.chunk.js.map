{"version":3,"sources":["components/Block/TaskBar/Taskbar.module.scss","components/TaskModal/TaskModal.module.scss","components/Block/DayBlock/DayBlock.module.scss","components/Calendar/Calendar.module.scss","components/Preloder/Preloader.module.scss","config/config.ts","config/firebase.ts","components/AuthRoute/AuthRoute.tsx","components/AuthContainer/AuthContainer.tsx","components/ErrorText/ErrorText.tsx","pages/auth/ForgotPasswordPage.tsx","pages/auth/LoginPage.tsx","pages/auth/LogoutPage.tsx","pages/auth/RegisterPage.tsx","constants.ts","components/Block/DayBlock/DayBlock.tsx","api/addTaskAPI.ts","api/deleteTaskAPI.ts","api/updateTask.ts","components/TaskModal/TaskModal.tsx","components/Block/TaskBar/Task/Task.tsx","components/Preloder/Preloader.tsx","components/Block/TaskBar/Taskbar.tsx","api/getTasksAPI.ts","components/Arrow/Arrow.tsx","api/authentication.ts","api/getTasksWithDates.ts","config/routes.ts","components/Calendar/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","config","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","initializeApp","getFirestore","AuthRoute","props","children","currentUser","to","AuthContainer","header","Container","Row","Col","xs","size","offset","sm","md","lg","Card","className","CardHeader","CardBody","ErrorText","error","ForgotPasswordPage","useState","sending","setSending","sent","setSent","email","setEmail","setError","FormGroup","Input","type","name","id","placeholder","onChange","event","target","value","Button","disabled","color","block","onClick","sendPasswordResetEmail","then","catch","message","LoginPage","authenticating","setAuthenticating","password","setPassword","history","useHistory","autoComplete","signInWithEmailAndPassword","result","push","LogoutPage","goBack","signOut","RegisterPage","registering","setRegistering","confirm","setConfirm","createUserWithEmailAndPassword","code","replace","split","join","CURRENT_YEAR","Date","getFullYear","TODAY","getDate","LIST_OF_WEEKDAYS","Sun","Mon","Tue","Wen","Thu","Fri","Sat","LIST_OF_MONTHS","January","February","March","April","May","June","July","August","September","October","November","December","DayBlock","React","memo","date","setDayNumber","month","redPin","greenPin","selectedDay","monthDay","slice","weekDay","getDay","s","dayBlockWrapper","one_day_block","selected","today_block","Object","keys","filter","key","wrapper","green","red","addTaskAPI","userId","todoId","title","a","description","db","getDatabase","postListRef","ref","newPostRef","set","completed","deleteTaskAPI","taskId","tasksRef","database","child","remove","updateTaskDescriptionAPI","update","updateTaskTitleAPI","newTitle","TaskModal","showModal","taskTitle","btnTitle","subTitle","change","text","setText","setDate","setDescription","editMode","setEditMode","addTaskForDay","background","modal","closeModal","modal_container","autoFocus","taskInput","e","currentTarget","onKeyDown","trim","length","onBlur","onDoubleClick","button","Task","showTaskModal","setShowTaskModal","task","labelWrapper","labelCheckbox","defaultChecked","updateTaskStatusAPI","checkInput","checkbox","labelText","src","alt","bin","Preloader","preloader","Taskbar","dayNumber","toString","showTaskModalFromTaskbar","setShowTaskModalFromTaskbar","setPreloader","currentTasks","setCurrentTasks","useEffect","snapHandler","snapshot","val","values","on","valueListenerHandler","getTasksAPI","off","taskbar_wrapper","map","t","addTaskBtn","Arrow","imgSrc","way","setMonth","setYear","year","arrow","getAuthUserAPI","getAuth","onAuthStateChanged","user","uid","getUserId","setUserId","getTasksWithDates","setTasks","snap","tasks","routes","path","exact","component","tasksFromDate","setTasksFromDate","getMonth","arrayOfDates","i","monthNum","dayBlockItems","dayTask","some","el","homePage_wrapper","calendar_title","find","m","days_wrapper","protected","App","loading","setLoading","Spinner","route","index","render","routeProps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","ReactDOM","StrictMode","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,gBAAkB,iCAAiC,KAAO,sBAAsB,UAAY,2BAA2B,WAAa,4BAA4B,cAAgB,+BAA+B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,aAAe,8BAA8B,UAAY,2BAA2B,UAAY,6B,mBCAhbD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,gBAAkB,mCAAmC,KAAO,wBAAwB,MAAQ,yBAAyB,WAAa,8BAA8B,WAAa,8BAA8B,gBAAkB,mCAAmC,WAAa,8BAA8B,UAAY,6BAA6B,MAAQ,yBAAyB,OAAS,0BAA0B,SAAW,8B,mBCAtdD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,YAAc,8BAA8B,SAAW,2BAA2B,gBAAkB,kCAAkC,QAAU,0BAA0B,MAAQ,wBAAwB,IAAM,wB,mBCAlRD,EAAOC,QAAU,CAAC,iBAAmB,mCAAmC,eAAiB,iCAAiC,aAAe,+BAA+B,MAAQ,0B,mBCAhLD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,0B,gKCWnDC,EAZA,CACXC,SAAU,CACNC,OAAQC,0CACRC,WAAYD,4BACZE,YAAaF,iDACbG,UAAWH,aACXI,cAAeJ,yBACfK,kBAAmBL,gBACnBM,MAAON,+CCAFO,GAJIT,IAASU,cAAcX,EAAOC,UAE7BW,cAEEX,IAASS,QCQdG,EAV8B,SAACC,GAAW,IAC7CC,EAAaD,EAAbC,SAER,OAAKL,EAAKM,YAIH,8BAAMD,IAHF,cAAC,IAAD,CAAUE,GAAG,Y,wECqBbC,EAxBsC,SAACJ,GAAW,IACrDC,EAAqBD,EAArBC,SAAUI,EAAWL,EAAXK,OAElB,OACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GACxBC,GAAI,CAAEF,KAAM,EAAGC,OAAQ,GACvBE,GAAI,CAAEH,KAAM,EAAGC,OAAQ,GACvBG,GAAI,CAAEJ,KAAM,EAAGC,OAAQ,GAJ3B,SAMI,eAACI,EAAA,EAAD,CAAMC,UAAU,OAAhB,UACI,cAACC,EAAA,EAAD,CAAYD,UAAU,wBAAtB,SACKX,IAEL,cAACa,EAAA,EAAD,UAAWjB,cCTpBkB,EAR8B,SAACnB,GAAW,IAC7CoB,EAAUpB,EAAVoB,MAER,MAAc,KAAVA,EAAqB,KAElB,uBAAOJ,UAAU,cAAjB,SAAgCI,KCkD5BC,EAtDkC,SAACrB,GAAW,IAAD,EAC1BsB,oBAAkB,GADQ,mBACjDC,EADiD,KACxCC,EADwC,OAEhCF,oBAAkB,GAFc,mBAEjDG,EAFiD,KAE3CC,EAF2C,OAG9BJ,mBAAiB,IAHa,mBAGjDK,EAHiD,KAG1CC,EAH0C,OAI9BN,mBAAiB,IAJa,mBAIjDF,EAJiD,KAI1CS,EAJ0C,KAsBxD,OACI,cAAC,EAAD,CAAexB,OAAO,sBAAtB,SACKoB,EACG,sFAEA,qCACI,yDACA,cAACK,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,KAAK,QACLC,GAAG,QACHC,YAAY,gBACZC,SAAU,SAACC,GAAD,OAAWT,EAASS,EAAMC,OAAOC,QAC3CA,MAAOZ,MAGf,cAACa,EAAA,EAAD,CACIC,SAAUlB,EACVmB,MAAM,UACNC,OAAK,EACLC,QAAS,iBApCX,KAAVxB,GAAcS,EAAS,IAE3BL,GAAW,QAEX5B,EAAKiD,uBAAuBlB,GACvBmB,MAAK,WACFpB,GAAQ,GACRF,GAAW,MAEduB,OAAM,SAAC3B,GACJS,EAAST,EAAM4B,SACfxB,GAAW,OAqBP,6BAQA,cAAC,EAAD,CAAWJ,MAAOA,UCwBvB6B,EApEyB,SAACjD,GAAW,IAAD,EACHsB,oBAAkB,GADf,mBACxC4B,EADwC,KACxBC,EADwB,OAErB7B,mBAAiB,IAFI,mBAExCK,EAFwC,KAEjCC,EAFiC,OAGfN,mBAAiB,IAHF,mBAGxC8B,EAHwC,KAG9BC,EAH8B,OAIrB/B,mBAAiB,IAJI,mBAIxCF,EAJwC,KAIjCS,EAJiC,KAMzCyB,EAAUC,cAiBhB,OACI,eAAC,EAAD,CAAelD,OAAO,QAAtB,UACI,cAACyB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,KAAK,QACLC,GAAG,QACHC,YAAY,gBACZC,SAAU,SAACC,GAAD,OAAWT,EAASS,EAAMC,OAAOC,QAC3CA,MAAOZ,MAGf,cAACG,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIyB,aAAa,eACbxB,KAAK,WACLC,KAAK,WACLC,GAAG,WACHC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAWgB,EAAYhB,EAAMC,OAAOC,QAC9CA,MAAOa,MAGf,cAACZ,EAAA,EAAD,CACIC,SAAUS,EACVR,MAAM,UACNC,OAAK,EACLC,QAAS,iBAzCH,KAAVxB,GAAcS,EAAS,IAE3BsB,GAAkB,QAElBvD,EAAK6D,2BAA2B9B,EAAOyB,GAClCN,MAAK,SAACY,GACHJ,EAAQK,KAAK,QAEhBZ,OAAM,SAAC3B,GACJ+B,GAAkB,GAClBtB,EAAST,EAAM4B,aA2BnB,mBAQA,kCACI,oBAAGhC,UAAU,kBAAb,mCAC2B,IACvB,cAAC,IAAD,CAAMb,GAAG,YAAT,+BAEJ,mBAAGa,UAAU,kBAAb,SACI,cAAC,IAAD,CAAMb,GAAG,UAAT,wCAGR,cAAC,EAAD,CAAWiB,MAAOA,QCxCfwC,EA1B0B,SAAC5D,GACtC,IAAMsD,EAAUC,cAMhB,OACI,eAAC,EAAD,CAAelD,OAAO,SAAtB,UACI,mBAAGW,UAAU,cAAb,8CACA,sBAAKA,UAAU,cAAf,UACI,cAACwB,EAAA,EAAD,CACIE,MAAM,SACN1B,UAAU,OACV4B,QAAS,kBAAMU,EAAQO,UAH3B,oBAOA,cAACrB,EAAA,EAAD,CAAQE,MAAM,OAAO1B,UAAU,OAAO4B,QAAS,WAdvDhD,EAAKkE,UAAUhB,MAAK,kBAAMQ,EAAQK,KAAK,cAc/B,2BCiEDI,EAlF4B,WAAO,IAAD,EACPzC,oBAAkB,GADX,mBACtC0C,EADsC,KACzBC,EADyB,OAEnB3C,mBAAiB,IAFE,mBAEtCK,EAFsC,KAE/BC,EAF+B,OAGbN,mBAAiB,IAHJ,mBAGtC8B,EAHsC,KAG5BC,EAH4B,OAIf/B,mBAAiB,IAJF,mBAItC4C,EAJsC,KAI7BC,EAJ6B,OAKnB7C,mBAAiB,IALE,mBAKtCF,EALsC,KAK/BS,EAL+B,KAOvCyB,EAAUC,cAuBhB,OACI,eAAC,EAAD,CAAelD,OAAO,WAAtB,UACI,cAACyB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,KAAK,QACLC,GAAG,QACHC,YAAY,gBACZC,SAAU,SAACC,GAAD,OAAWT,EAASS,EAAMC,OAAOC,QAC3CA,MAAOZ,MAGf,cAACG,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIyB,aAAa,eACbxB,KAAK,WACLC,KAAK,WACLC,GAAG,WACHC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAWgB,EAAYhB,EAAMC,OAAOC,QAC9CA,MAAOa,MAGf,cAACtB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIyB,aAAa,eACbxB,KAAK,WACLC,KAAK,UACLC,GAAG,UACHC,YAAY,mBACZC,SAAU,SAACC,GAAD,OAAW8B,EAAW9B,EAAMC,OAAOC,QAC7CA,MAAO2B,MAGf,cAAC1B,EAAA,EAAD,CACIC,SAAUuB,EACVtB,MAAM,UACNC,OAAK,EACLC,QAAS,WA1DbQ,IAAac,GAKH,KAAV9C,GAAcS,EAAS,IAE3BoC,GAAe,GAEfrE,EAAKwE,+BAA+BzC,EAAOyB,GACtCN,MAAK,WACFQ,EAAQK,KAAK,aAEhBZ,OAAM,SAAC3B,GACJA,EAAMiD,KAAOjD,EAAMiD,KAAKC,QAAQ,eAAe,IAAIC,MAAM,IAAK,GAAGC,KAAK,IACtE3C,EAAST,EAAMiD,MACfJ,GAAe,OAfnBpC,EAAS,2CAqDT,qBAQA,gCACI,oBAAGb,UAAU,kBAAb,sCAC6B,cAAC,IAAD,CAAMb,GAAG,SAAT,yBAGjC,cAAC,EAAD,CAAWiB,MAAOA,QCrFjBqD,GAAe,IAAIC,MAAOC,cAC1BC,GAAQ,IAAIF,MAAOG,UACnBC,EAAmB,CAC5BC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GAEIC,EAAiB,CAC1BC,QAAS,EACTC,SAAU,EACVC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,KAAM,EACNC,KAAM,EACNC,OAAQ,EACRC,UAAW,EACXC,QAAS,GACTC,SAAU,GACVC,SAAU,I,iBCmCCC,EAzC+BC,IAAMC,MAAK,SAACrG,GAAW,IAO5CuC,EANb+D,EAA6DtG,EAA7DsG,KAAMC,EAAuDvG,EAAvDuG,aAAcC,EAAyCxG,EAAzCwG,MAAOC,EAAkCzG,EAAlCyG,OAAQC,EAA0B1G,EAA1B0G,SAAUC,EAAgB3G,EAAhB2G,YAE/CC,GAAYN,EAAKO,OAAO,GAExBC,EAAU,IAAIpC,KAAKD,EAAc+B,EAAQ,EAAGI,GAAUG,SAO5D,OACI,sBACInE,QAAS,kBAAM2D,EAAaK,IAC5B5F,UAAWgG,IAAEC,gBAFjB,UAII,sBACIjG,UACI4F,IAAaD,EAAb,UACSK,IAAEE,cADX,YAC4BF,IAAEG,UACxBP,IAAahC,EAAb,UACGoC,IAAEE,cADL,YACsBF,IAAEI,aADxB,UAEGJ,IAAEE,eANnB,UASI,gCAnBS3E,EAmBUuE,EAlB3BO,OAAOC,KAAKxC,GAAkByC,QAC1B,SAACC,GAAD,OAAS1C,EAAiB0C,KAAqBjF,QAkB3C,+BAAOqE,OAEX,sBAAK5F,UAAWgG,IAAES,QAAlB,UACKf,GACG,mCACI,sBAAM1F,UAAWgG,IAAEU,UAG1BjB,GAAU,sBAAMzF,UAAWgG,IAAEW,e,iEClDjCC,EAAU,uCAAG,WACtBC,EACAC,EACAC,GAHsB,iCAAAC,EAAA,sDAItBC,EAJsB,+BAIR,GAERC,EAAKC,cACLC,EAAcC,YAAIH,EAAD,UAAQL,EAAR,YAAkBC,IACnCQ,EAAa3E,YAAKyE,GACxBG,YAAID,EAAY,CACZP,QACAS,WAAW,EACXtG,GAAIoG,EAAWd,IACfS,cACAJ,WAdkB,2CAAH,0DCAVY,EAAa,uCAAG,WACzBZ,EACAC,EACAY,GAHyB,eAAAV,EAAA,6DAKnBW,EAAWxJ,IAASyJ,WAAWP,IAAIR,GAAQgB,MAAMf,GAAQe,MAAMH,GAL5C,SAMnBC,EAASG,SANU,2CAAH,0DCAbC,EAAwB,uCAAG,WACpClB,EACAC,EACAY,EACAT,GAJoC,eAAAD,EAAA,6DAM9BW,EAAWxJ,IAASyJ,WAAWP,IAAIR,GAAQgB,MAAMf,GAAQe,MAAMH,GANjC,SAO9BC,EAASK,OAAO,CAClBf,gBARgC,2CAAH,4DAYxBgB,EAAkB,uCAAG,WAC9BpB,EACAC,EACAY,EACAQ,GAJ8B,eAAAlB,EAAA,6DAMxBW,EAAWxJ,IAASyJ,WAAWP,IAAIR,GAAQgB,MAAMf,GAAQe,MAAMH,GANvC,SAOxBC,EAASK,OAAO,CAClBjB,MAAOmB,IARmB,2CAAH,4DC8GhBC,EAvGiC/C,IAAMC,MAAK,SAACrG,GAAW,IAEnE+H,EASE/H,EATF+H,MACAqB,EAQEpJ,EARFoJ,UACAtB,EAOE9H,EAPF8H,OACAuB,EAMErJ,EANFqJ,UACAC,EAKEtJ,EALFsJ,SACAZ,EAIE1I,EAJF0I,OACAa,EAGEvJ,EAHFuJ,SACAC,EAEExJ,EAFFwJ,OACA3B,EACE7H,EADF6H,OAVkE,EAa5CvG,mBAAQ,OAAS+H,QAAT,IAASA,IAAa,IAbc,mBAa7DI,EAb6D,KAavDC,EAbuD,OAc5CpI,mBAAQ,OAASwG,QAAT,IAASA,IAAU,IAdiB,mBAc7DxB,EAd6D,KAcvDqD,EAduD,OAe9BrI,mBAAQ,OAASiI,QAAT,IAASA,IAAY,IAfC,mBAe7DtB,EAf6D,KAehD2B,EAfgD,OAgBpCtI,oBAAmBkI,GAhBiB,mBAgB7DK,EAhB6D,KAgBnDC,EAhBmD,KA2B9DC,EAAa,uCAAG,sBAAA/B,EAAA,yDAChB1B,IAASwB,EADO,qBAEd0B,EAFc,gCAGVP,EAAmBpB,EAAQC,EAAT,OAAiBY,QAAjB,IAAiBA,IAAU,GAAIe,GAHvC,uBAIVV,EACJlB,EACAC,EAF4B,OAG5BY,QAH4B,IAG5BA,IAAU,IACVT,GARc,+CAWVL,EAAWC,EAAQC,EAAQ2B,EAAMxB,GAXvB,wCAclBuB,GAdkB,uCAcDf,EAAcZ,EAAQC,EAAT,OAAiBY,QAAjB,IAAiBA,IAAU,IAdvC,yBAeZd,EAAWC,EAAQvB,EAAMmD,EAAMxB,GAfnB,QAiBpBmB,GAAU,GAjBU,4CAAH,qDAuBnB,OACE,qCACE,qBAAKpI,UAAWgG,IAAEgD,WAAYpH,QAAS,kBAAMwG,GAAU,MACvD,sBAAKpI,UAAWgG,IAAEiD,MAAlB,UACE,qBAAKjJ,UAAWgG,IAAEkD,WAAYtH,QAAS,kBAAMwG,GAAU,IAAvD,eAGA,sBAAKpI,UAAWgG,IAAEmD,gBAAlB,UACGpC,GAAS,6BAAKA,IACf,uBACEqC,WAAS,EACTpJ,UAAWgG,IAAEqD,UACblI,YAAY,gBACZC,SA7CiB,SAACkI,GAAD,OACzBZ,EAAQY,EAAEC,cAAchI,QA6ChBiI,UAjBe,SAACF,GAAD,MACb,UAAVA,EAAE9C,KAAmBuC,KAiBbxH,MAAOkH,EACPzH,KAAK,SACJyH,EAAKgB,OAAOC,OAAS,IAC1B,sBAAM1J,UAAWgG,IAAE5F,MAAnB,2CACGyI,EACC,0BACEc,OAjDU,kBAAMnB,GAAUM,GAAY,IAkDtC1H,SApDkB,SAACkI,GAAD,OAC5BV,EAAeU,EAAEC,cAAchI,QAoDrBA,MAAO0F,EACPjH,UAAS,UAAKgG,IAAEuC,YAGlB,qBACEqB,cAvDe,kBAAMd,GAAaD,IAwDlC7I,UAAS,UAAKgG,IAAEuC,UAFlB,SAIGtB,IAGL,uBACEjH,UAAWgG,IAAEqD,UACbjI,SA9DgB,SAACkI,GAAD,OACxBX,EAAQW,EAAEC,cAAchI,QA8DhBA,MAAO+D,EACPtE,KAAK,SAEP,wBACES,UAAWgH,EAAKgB,QAAUhB,EAAKgB,OAAOC,OAAS,GAC/C1J,UAAWgG,IAAE6D,OACbjI,QAAS,kBAAMmH,KAHjB,SAKGT,gBCpCEwB,EAjEuB1E,IAAMC,MAAK,SAACrG,GAAW,IACnD0I,EAAuD1I,EAAvD0I,OAAQX,EAA+C/H,EAA/C+H,MAAOD,EAAwC9H,EAAxC8H,OAAQU,EAAgCxI,EAAhCwI,UAAWe,EAAqBvJ,EAArBuJ,SAAU1B,EAAW7H,EAAX6H,OADM,EAGhBvG,oBAAkB,GAHF,mBAGnDyJ,EAHmD,KAGpCC,EAHoC,KAK1D,OACE,+BACE,sBAAKhK,UAAWgG,IAAEiE,KAAlB,UACE,qBAAKjK,UAAWgG,IAAEkE,aAAlB,SACE,wBAAOlK,UAAWgG,IAAEmE,cAApB,UACE,uBACEC,eAAgB5C,EAChBpG,SAAU,kBFDW,SAC/ByF,EACAC,EACAY,EACAF,GAEiBrJ,IAASyJ,WAAWP,IAAIR,GAAQgB,MAAMf,GAAQe,MAAMH,GAC5DM,OAAO,CACZR,WAAYA,IENJ6C,CACExD,EACAC,EACAY,EACAF,IAGJxG,KAAK,WACLhB,UAAWgG,IAAEsE,WACbpJ,GAAIwG,IAEN,sBAAM1H,UAAWgG,IAAEuE,WACnB,sBACEvK,UAAS,UAAKgG,IAAEwE,UAAP,YACPhD,GAAaxB,IAAEwB,WAFnB,SAKiBT,SAIrB,gCACE,qBACEnF,QAAS,kBAAMoI,GAAiB,IAChCS,IAAI,cACJC,IAAI,KAEN,qBACE9I,QAAS,kBAAM6F,EAAcZ,EAAQC,EAAQY,IAC7C1H,UAAWgG,IAAE2E,IACbF,IAAI,WACJC,IAAI,WAITX,GACC,cAAC,EAAD,CACElD,OAAQA,EACR2B,QAAM,EACNd,OAAQA,EACRY,SAAS,cACTF,UAAW4B,EACX3B,UAAWtB,EACXA,MAAM,cACNwB,SAAUA,EACVzB,OAAQA,U,oBCnEH8D,GAJG,WACd,OAAO,qBAAK5K,UAAWgG,KAAE6E,aCgGdC,GA7E6B1F,IAAMC,MAC9C,YAAmC,IAAhC0F,EAA+B,EAA/BA,UAAWvF,EAAoB,EAApBA,MAAOqB,EAAa,EAAbA,OACXC,EAAM,UAAMrD,EAAauH,WAAnB,YAAiC,WAAIxF,GAAQK,OACpD,GADO,YAEP,WAAIkF,GAAYlF,OAAO,IAHE,EAO1BvF,oBAAkB,GAPQ,mBAK1B2K,EAL0B,KAM1BC,EAN0B,OAQI5K,oBAAkB,GARtB,mBAQvBuK,EARuB,KAQZM,EARY,OASU7K,mBAAsB,IAThC,mBASvB8K,EATuB,KASTC,EATS,KAuB9B,OAZAC,qBAAU,WAAO,IAAD,EC/BG,SACvBzE,EACAwE,EACAvE,EACAqE,GAEAA,GAAa,GAEb,IAAMI,EAAc,SAACC,GACbA,EAASC,MACTJ,EAAgBhF,OAAOqF,OAAOF,EAASC,QAEvCJ,EAAgB,IAEpBF,GAAa,IAGXxD,EAAWxJ,IAASyJ,WAAWP,IAApB,UAA2BR,EAA3B,YAAqCC,IAGtD,OAFAa,EAASgE,GAAG,QAASJ,GAEd,CAAE5D,WAAUiE,qBAAsBL,GDYUM,CACvChF,EACAwE,EACAvE,EACAqE,GAJIxD,EADI,EACJA,SAAUiE,EADN,EACMA,qBAMlB,OAAO,WACHjE,EAASmE,IAAI,QAASF,MAE3B,CAAC9E,EAAQD,IAGR,qCACI,qBAAK7G,UAAWgG,IAAE+F,gBAAlB,SACKlB,EACG,cAAC,GAAD,IAEA,qCACI,gCACI,oCAEI,qCAAQE,EAAR,OAFJ,WAKA,6BACKK,EAAaY,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEIpF,OAAQoF,EAAEpF,OACVC,OAAQA,EACRY,OAAQuE,EAAE/K,GACV6F,MAAOkF,EAAElF,MACTS,UAAWyE,EAAEzE,UACbe,SAAU0D,EAAEhF,aANPgF,EAAE/K,YAWvB,wBACIlB,UAAWgG,IAAEkG,WACbtK,QAAS,kBACLsJ,GAA4B,IAHpC,2BAWXD,GACG,cAAC,EAAD,CACIpE,OAAQA,EACR2B,QAAQ,EACRF,SAAS,WACTxB,OAAQA,EACRC,MAAK,UAAKgE,EAAL,QACL3C,UAAW8C,U,oBEtDpBiB,GAzByB/G,IAAMC,MAAK,SAACrG,GAAW,IACnDoN,EAAgDpN,EAAhDoN,OAAQC,EAAwCrN,EAAxCqN,IAAKC,EAAmCtN,EAAnCsN,SAAUC,EAAyBvN,EAAzBuN,QAAS/G,EAAgBxG,EAAhBwG,MAAOgH,EAASxN,EAATwN,KAc/C,OACI,qBACI5K,QAdY,WACZ4D,EAAQ6G,IAAQ,GAChBC,EAAS,IACTC,EAAQC,EAAO,IACRhH,EAAQ6G,IAAQ,IACvBE,EAAQC,EAAO,GACfF,EAAS,IAETA,EAAS9G,EAAQ6G,IAOjBrM,UAAWgG,KAAEyG,MACbhC,IAAK2B,EACL1B,IAAI,4C,SC9BHgC,GAAc,uCAAG,8BAAA1F,EAAA,6DACtBH,EAAS,GADa,SAEP8F,eAFO,cAEpB/N,EAFoB,gBAGpBgO,aAAmBhO,GAAM,SAACiO,GACxBA,IACAhG,EAASgG,EAAKC,QALI,gCAQnBjG,GARmB,2CAAH,qDAWdkG,GAAS,uCAAG,WAAOC,GAAP,eAAAhG,EAAA,sEACA0F,KADA,OACf7F,EADe,OAErBmG,EAAUnG,GAFW,2CAAH,sDCVToG,GAAiB,uCAAG,WAC7BpG,EACAqG,GAF6B,iBAAAlG,EAAA,sEAMN7I,IAASyJ,WAAWP,IAAIR,GANlB,cAMvBc,EANuB,gBAQvBA,EAASgE,GAAG,SAAS,SAACwB,GACpBA,EAAK1B,OACL2B,EAAQD,EAAK1B,MACbyB,EAASE,IAETF,EAAS,OAbY,gCAgBtBE,GAhBsB,2CAAH,wDC0CfC,GAtCU,CACrB,CACIC,KAAM,IACNC,OAAO,EACPC,UCA+BpI,IAAMC,MAAK,WAAO,IAAD,EACxB/E,mBAAiB,IADO,mBAC7CuG,EAD6C,KACrCmG,EADqC,OAEV1M,mBAAc,IAFJ,mBAE7CmN,EAF6C,KAE9BC,EAF8B,KAIpDpC,qBAAU,WACNyB,GAAUC,KACX,IAEH1B,qBAAU,WACNzE,GAAUoG,GAAkBpG,EAAQ6G,KACrC,CAAC7G,IAUJ,IApBoD,MAY1BvG,oBAAiB,IAAIoD,MAAOiK,WAAa,GAZf,mBAY7CnI,EAZ6C,KAYtC8G,EAZsC,OAa5BhM,mBAAiBmD,GAbW,mBAa7C+I,EAb6C,KAavCD,EAbuC,OAelBjM,mBAAiBsD,GAfC,mBAe7CmH,EAf6C,KAelCxF,EAfkC,KAmB9CqI,EAAe,GACZC,EAAI,EAAGA,GAHa,IAAInK,KAAK8I,EAAMhH,EAAO,GAAG3B,UAGfgK,IACnCD,EAAajL,KAAb,UACO6J,EAAKxB,WADZ,YAC0B,WAAIxF,GAAQK,OAAO,GAD7C,YACmD,WAAIgI,GAAIhI,OAAO,KAItE,IdG0BiI,EcHpBC,EAAgBH,EAAa5B,KAAI,SAAC1G,GAAU,IAAD,IACzCG,EACAC,EACEsI,EAAUP,EAAcnI,GAK9B,OAJI0I,IACAvI,EAASY,OAAOqF,OAAOsC,GAASC,MAAK,SAACC,GAAD,OAAcA,EAAG1G,aACtD9B,EAAWW,OAAOqF,OAAOsC,GAASC,MAAK,SAACC,GAAD,OAAaA,EAAG1G,cAGvD,cAAC,EAAD,CACI7B,YAAaoF,EACbtF,OAAM,UAAEA,SAAF,SACNC,SAAQ,UAAEA,SAAF,SACRmB,OAAQA,EACRrB,MAAOA,EACPD,aAAcA,EAEdD,KAAMA,GADDA,MAKjB,OACI,sBAAKtF,UAAWgG,KAAEmI,iBAAlB,UACI,sBAAKnO,UAAWgG,KAAEoI,eAAlB,qBAEI,0CdtBcN,EcsBUtI,EdrB7Ba,OAAOC,KAAKhC,GAAgB+J,MAC/B,SAACC,GAAD,OAAOhK,EAAegK,KAAyBR,McoBvC,aAAmCtB,KACnC,+BACI,cAAC,IAAD,CAAMrN,GAAG,UAAT,yBAGR,sBAAKa,UAAWgG,KAAEuI,aAAlB,UACI,cAAC,GAAD,CACI/B,KAAMA,EACND,QAASA,EACT/G,MAAOA,EACP8G,SAAUA,EACVD,KAAM,EACND,OAAO,kBAEV2B,EACD,cAAC,GAAD,CACIvB,KAAMA,EACND,QAASA,EACT/G,MAAOA,EACP8G,SAAUA,EACVD,IAAK,EACLD,OAAO,sBAGdrB,GACG,cAAC,GAAD,CAASlE,OAAQA,EAAQrB,MAAOA,EAAOuF,UAAWA,UD3E1D9J,KAAM,YACNuN,WAAW,GAEf,CACIlB,KAAM,YACNC,OAAO,EACPC,UAAWzK,EACX9B,KAAM,gBACNuN,WAAW,GAEf,CACIlB,KAAM,SACNC,OAAO,EACPC,UAAWvL,EACXhB,KAAM,aACNuN,WAAW,GAEf,CACIlB,KAAM,UACNC,OAAO,EACPC,UAAW5K,EACX3B,KAAM,cACNuN,WAAW,GAEf,CACIlB,KAAM,UACNC,OAAO,EACPC,UAAWnN,EACXY,KAAM,uBACNuN,WAAW,IEIJC,GApC0B,SAACzP,GAAW,IAAD,EAClBsB,oBAAkB,GADA,mBACzCoO,EADyC,KAChCC,EADgC,KAShD,OANArD,qBAAU,WACN1M,EAAKgO,oBAAmB,SAACC,GACrB8B,GAAW,QAEhB,IAECD,EAAgB,cAACE,EAAA,EAAD,CAASlN,MAAM,SAG/B,8BACI,cAAC,IAAD,UACK2L,GAAOrB,KAAI,SAAC6C,EAAOC,GAAR,OACR,cAAC,IAAD,CAEIxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbwB,OAAQ,SAACC,GACL,OAAIH,EAAML,UAEF,cAAC,EAAD,UACI,cAACK,EAAMrB,UAAP,eAAqBwB,MAI1B,cAACH,EAAMrB,UAAP,eAAqBwB,MAX3BF,WCTdG,I,MAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBrN,MACjB,YAAkD,IAA/CsN,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCJxBO,EAAQ,IAAUvR,SAElBwR,IAASX,OACL,cAAC,IAAMY,WAAP,UACI,cAAC,IAAD,UACI,cAAC,GAAD,QAGRC,SAASC,eAAe,SAM5BZ,O","file":"static/js/main.6fb5d505.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskbar_wrapper\":\"Taskbar_taskbar_wrapper__3L7C_\",\"task\":\"Taskbar_task__p7vcY\",\"taskTitle\":\"Taskbar_taskTitle__9VAaE\",\"addTaskBtn\":\"Taskbar_addTaskBtn__2V9y1\",\"labelCheckbox\":\"Taskbar_labelCheckbox__1MgM_\",\"option\":\"Taskbar_option__1zel-\",\"checkInput\":\"Taskbar_checkInput__13HP7\",\"checkbox\":\"Taskbar_checkbox__1y8um\",\"labelWrapper\":\"Taskbar_labelWrapper__dawS9\",\"labelText\":\"Taskbar_labelText__2WZpa\",\"completed\":\"Taskbar_completed__f3EgF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"TaskModal_modal__CgXKF\",\"modal_container\":\"TaskModal_modal_container__1giAv\",\"prev\":\"TaskModal_prev__XH5Sm\",\"after\":\"TaskModal_after__15sw_\",\"background\":\"TaskModal_background__3dB7p\",\"closeModal\":\"TaskModal_closeModal__3yYtR\",\"backgroundAnime\":\"TaskModal_backgroundAnime__22Kcu\",\"modalAnime\":\"TaskModal_modalAnime__14Vlr\",\"taskInput\":\"TaskModal_taskInput__2Grpg\",\"error\":\"TaskModal_error__1CHsm\",\"button\":\"TaskModal_button__MKkzG\",\"subTitle\":\"TaskModal_subTitle__1XaAE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"one_day_block\":\"DayBlock_one_day_block__K9Ze4\",\"today_block\":\"DayBlock_today_block__2q11M\",\"selected\":\"DayBlock_selected__1lZ5T\",\"dayBlockWrapper\":\"DayBlock_dayBlockWrapper__zZ_MN\",\"wrapper\":\"DayBlock_wrapper__1VFWf\",\"green\":\"DayBlock_green__208TT\",\"red\":\"DayBlock_red__2PUli\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homePage_wrapper\":\"Calendar_homePage_wrapper__1uTMs\",\"calendar_title\":\"Calendar_calendar_title__1b9rG\",\"days_wrapper\":\"Calendar_days_wrapper__3Gmyx\",\"arrow\":\"Calendar_arrow__OBWJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2TUIM\",\"spin\":\"Preloader_spin__3EYMO\"};","const config = {\n    firebase: {\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n        authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n        databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n        projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n        storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n        messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n        appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    },\n}\n\nexport default config\n","import { getFirestore } from 'firebase/firestore'\nimport firebase from 'firebase/compat'\nimport config from './config'\n\nconst Firebase = firebase.initializeApp(config.firebase)\n\nexport const db = getFirestore()\n\nexport const auth = firebase.auth()\nexport default Firebase\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { auth } from '../../config/firebase'\n\nexport interface IAuthRouteProps {}\n\nconst AuthRoute: React.FC<IAuthRouteProps> = (props) => {\n    const { children } = props\n\n    if (!auth.currentUser) {\n        return <Redirect to=\"/login\" />\n    }\n\n    return <div>{children}</div>\n}\n\nexport default AuthRoute\n","import React from 'react'\nimport { Card, CardBody, CardHeader, Col, Container, Row } from 'reactstrap'\n\nexport interface IAuthContainerProps {\n    header: any\n}\n\nconst AuthContainer: React.FC<IAuthContainerProps> = (props) => {\n    const { children, header } = props\n\n    return (\n        <Container>\n            <Row>\n                <Col\n                    xs={{ size: 10, offset: 1 }}\n                    sm={{ size: 8, offset: 2 }}\n                    md={{ size: 6, offset: 3 }}\n                    lg={{ size: 4, offset: 4 }}\n                >\n                    <Card className=\"mt-5\">\n                        <CardHeader className=\"bg-primary text-white\">\n                            {header}\n                        </CardHeader>\n                        <CardBody>{children}</CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default AuthContainer\n","import React from 'react'\n\nexport interface IErrorTextProps {\n    error: string\n}\n\nconst ErrorText: React.FC<IErrorTextProps> = (props) => {\n    const { error } = props\n\n    if (error === '') return null\n\n    return <small className=\"text-danger\">{error}</small>\n}\n\nexport default ErrorText\n","import React, { useState } from 'react'\nimport { Button, FormGroup, Input } from 'reactstrap'\nimport AuthContainer from '../../components/AuthContainer/AuthContainer'\nimport ErrorText from '../../components/ErrorText/ErrorText'\nimport { auth } from '../../config/firebase'\nimport IPageProps from '../../interfaces/page'\n\nconst ForgotPasswordPage: React.FC<IPageProps> = (props) => {\n    const [sending, setSending] = useState<boolean>(false)\n    const [sent, setSent] = useState<boolean>(false)\n    const [email, setEmail] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const resetPasswordRequest = () => {\n        if (error !== '') setError('')\n\n        setSending(true)\n\n        auth.sendPasswordResetEmail(email)\n            .then(() => {\n                setSent(true)\n                setSending(false)\n            })\n            .catch((error) => {\n                setError(error.message)\n                setSending(false)\n            })\n    }\n\n    return (\n        <AuthContainer header=\"Send Password Reset\">\n            {sent ? (\n                <p>A link has been sent to your email with instructions.</p>\n            ) : (\n                <>\n                    <p>Please enter your email.</p>\n                    <FormGroup>\n                        <Input\n                            type=\"email\"\n                            name=\"email\"\n                            id=\"email\"\n                            placeholder=\"Email Address\"\n                            onChange={(event) => setEmail(event.target.value)}\n                            value={email}\n                        />\n                    </FormGroup>\n                    <Button\n                        disabled={sending}\n                        color=\"success\"\n                        block\n                        onClick={() => resetPasswordRequest()}\n                    >\n                        Send Reset Link\n                    </Button>\n                    <ErrorText error={error} />\n                </>\n            )}\n        </AuthContainer>\n    )\n}\n\nexport default ForgotPasswordPage\n","import React, { useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Button, FormGroup, Input } from 'reactstrap'\nimport firebase from 'firebase/compat'\nimport AuthContainer from '../../components/AuthContainer/AuthContainer'\nimport ErrorText from '../../components/ErrorText/ErrorText'\nimport { auth } from '../../config/firebase'\nimport IPageProps from '../../interfaces/page'\nimport { SignInWithSocialMedia } from './modules'\n\nconst LoginPage: React.FC<IPageProps> = (props) => {\n    const [authenticating, setAuthenticating] = useState<boolean>(false)\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const history = useHistory()\n\n    const signInWithEmailAndPassword = () => {\n        if (error !== '') setError('')\n\n        setAuthenticating(true)\n\n        auth.signInWithEmailAndPassword(email, password)\n            .then((result) => {\n                history.push('/')\n            })\n            .catch((error) => {\n                setAuthenticating(false)\n                setError(error.message)\n            })\n    }\n\n    return (\n        <AuthContainer header=\"Login\">\n            <FormGroup>\n                <Input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    placeholder=\"Email Address\"\n                    onChange={(event) => setEmail(event.target.value)}\n                    value={email}\n                />\n            </FormGroup>\n            <FormGroup>\n                <Input\n                    autoComplete=\"new-password\"\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"password\"\n                    placeholder=\"Enter Password\"\n                    onChange={(event) => setPassword(event.target.value)}\n                    value={password}\n                />\n            </FormGroup>\n            <Button\n                disabled={authenticating}\n                color=\"success\"\n                block\n                onClick={() => signInWithEmailAndPassword()}\n            >\n                Login\n            </Button>\n            <small>\n                <p className=\"m-1 text-center\">\n                    Don't have an account?{' '}\n                    <Link to=\"/register\">Register here.</Link>\n                </p>\n                <p className=\"m-1 text-center\">\n                    <Link to=\"/forget\">Forget your password?</Link>\n                </p>\n            </small>\n            <ErrorText error={error} />\n        </AuthContainer>\n    )\n}\n\nexport default LoginPage\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Button } from 'reactstrap'\nimport AuthContainer from '../../components/AuthContainer/AuthContainer'\nimport { auth } from '../../config/firebase'\nimport IPageProps from '../../interfaces/page'\n\nconst LogoutPage: React.FC<IPageProps> = (props) => {\n    const history = useHistory()\n\n    const Logout = () => {\n        auth.signOut().then(() => history.push('/login'))\n    }\n\n    return (\n        <AuthContainer header=\"Logout\">\n            <p className=\"text-center\">Are you sure you want to logout?</p>\n            <div className=\"text-center\">\n                <Button\n                    color=\"danger\"\n                    className=\"mr-2\"\n                    onClick={() => history.goBack()}\n                >\n                    Cancel\n                </Button>\n                <Button color=\"info\" className=\"mr-2\" onClick={() => Logout()}>\n                    Logout\n                </Button>\n            </div>\n        </AuthContainer>\n    )\n}\n\nexport default LogoutPage\n","import React, { useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Button, FormGroup, Input } from 'reactstrap'\nimport AuthContainer from '../../components/AuthContainer/AuthContainer'\nimport ErrorText from '../../components/ErrorText/ErrorText'\nimport { auth } from '../../config/firebase'\nimport IPageProps from '../../interfaces/page'\n\nconst RegisterPage: React.FC<IPageProps> = () => {\n    const [registering, setRegistering] = useState<boolean>(false)\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [confirm, setConfirm] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const history = useHistory()\n\n    const signUpWithEmailAndPassword = () => {\n        if (password !== confirm) {\n            setError('Please make sure your passwords match.')\n            return\n        }\n\n        if (error !== '') setError('')\n\n        setRegistering(true)\n\n        auth.createUserWithEmailAndPassword(email, password)\n            .then(() => {\n                history.push('/login')\n            })\n            .catch((error) => {\n                error.code = error.code.replace(/firebase: /gi,'').split('.', 1).join('')\n                setError(error.code)\n                setRegistering(false)\n            })\n    }\n\n    return (\n        <AuthContainer header=\"Register\">\n            <FormGroup>\n                <Input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    placeholder=\"Email Address\"\n                    onChange={(event) => setEmail(event.target.value)}\n                    value={email}\n                />\n            </FormGroup>\n            <FormGroup>\n                <Input\n                    autoComplete=\"new-password\"\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"password\"\n                    placeholder=\"Enter Password\"\n                    onChange={(event) => setPassword(event.target.value)}\n                    value={password}\n                />\n            </FormGroup>\n            <FormGroup>\n                <Input\n                    autoComplete=\"new-password\"\n                    type=\"password\"\n                    name=\"confirm\"\n                    id=\"confirm\"\n                    placeholder=\"Confirm Password\"\n                    onChange={(event) => setConfirm(event.target.value)}\n                    value={confirm}\n                />\n            </FormGroup>\n            <Button\n                disabled={registering}\n                color=\"success\"\n                block\n                onClick={() => signUpWithEmailAndPassword()}\n            >\n                Sign Up\n            </Button>\n            <small>\n                <p className=\"m-1 text-center\">\n                    Already have an account? <Link to=\"/login\">Login.</Link>\n                </p>\n            </small>\n            <ErrorText error={error} />\n        </AuthContainer>\n    )\n}\n\nexport default RegisterPage\n","export const CURRENT_YEAR = new Date().getFullYear()\nexport const TODAY = new Date().getDate()\nexport const LIST_OF_WEEKDAYS = {\n    Sun: 0,\n    Mon: 1,\n    Tue: 2,\n    Wen: 3,\n    Thu: 4,\n    Fri: 5,\n    Sat: 6,\n}\nexport const LIST_OF_MONTHS = {\n    January: 1,\n    February: 2,\n    March: 3,\n    April: 4,\n    May: 5,\n    June: 6,\n    July: 7,\n    August: 8,\n    September: 9,\n    October: 10,\n    November: 11,\n    December: 12,\n}\n\ntype MonthsNameType =\n    | 'January'\n    | 'February'\n    | 'March'\n    | 'April'\n    | 'May'\n    | 'June'\n    | 'July'\n    | 'August'\n    | 'September'\n    | 'October'\n    | 'November'\n    | 'December'\n\nexport const findMonthName = (monthNum: number) => {\n    return Object.keys(LIST_OF_MONTHS).find(\n        (m) => LIST_OF_MONTHS[m as MonthsNameType] === monthNum\n    )\n}\n","import React from 'react'\nimport { CURRENT_YEAR, LIST_OF_WEEKDAYS, TODAY } from '../../../constants'\n\nimport s from './DayBlock.module.scss'\n\ntype DayBlockPropsType = {\n    date: string\n    setDayNumber: (day: number) => void\n    selectedDay: number\n    month: number\n    userId: string\n    redPin: boolean\n    greenPin: boolean\n}\n\ntype WeekType = 'Sun' | 'Mon' | 'Tue' | 'Wen' | 'Thu' | 'Fri' | 'Sat'\n\nconst DayBlock: React.FC<DayBlockPropsType> = React.memo((props) => {\n    const { date, setDayNumber, month, redPin, greenPin, selectedDay } = props\n\n    const monthDay = +date.slice(-2)\n\n    const weekDay = new Date(CURRENT_YEAR, month - 1, monthDay).getDay()\n\n    const findWeekDay = (value: number) =>\n        Object.keys(LIST_OF_WEEKDAYS).filter(\n            (key) => LIST_OF_WEEKDAYS[key as WeekType] === value\n        )\n\n    return (\n        <div\n            onClick={() => setDayNumber(monthDay)}\n            className={s.dayBlockWrapper}\n        >\n            <div\n                className={\n                    monthDay === selectedDay\n                        ? `${s.one_day_block} ${s.selected}`\n                        : monthDay === TODAY\n                        ? `${s.one_day_block} ${s.today_block}`\n                        : `${s.one_day_block}`\n                }\n            >\n                <span>{findWeekDay(weekDay)}</span>\n                <span>{monthDay}</span>\n            </div>\n            <div className={s.wrapper}>\n                {greenPin && (\n                    <>\n                        <span className={s.green} />\n                    </>\n                )}\n                {redPin && <span className={s.red} />}\n            </div>\n        </div>\n    )\n})\n\nexport default DayBlock\n","import { getDatabase, push, ref, set } from 'firebase/database'\n\nexport const addTaskAPI = async (\n    userId: string,\n    todoId: string,\n    title: string,\n    description = ''\n) => {\n    const db = getDatabase()\n    const postListRef = ref(db, `${userId}/${todoId}`)\n    const newPostRef = push(postListRef)\n    set(newPostRef, {\n        title,\n        completed: false,\n        id: newPostRef.key,\n        description,\n        userId,\n    })\n}\n","import firebase from 'firebase/compat'\n\nexport const deleteTaskAPI = async (\n    userId: string,\n    todoId: string,\n    taskId: string\n) => {\n    const tasksRef = firebase.database().ref(userId).child(todoId).child(taskId)\n    await tasksRef.remove()\n}\n","import firebase from 'firebase/compat'\n\nexport const updateTaskDescriptionAPI = async (\n    userId: string,\n    todoId: string,\n    taskId: string,\n    description: string\n) => {\n    const tasksRef = firebase.database().ref(userId).child(todoId).child(taskId)\n    await tasksRef.update({\n        description,\n    })\n}\n\nexport const updateTaskTitleAPI = async (\n    userId: string,\n    todoId: string,\n    taskId: string,\n    newTitle: string\n) => {\n    const tasksRef = firebase.database().ref(userId).child(todoId).child(taskId)\n    await tasksRef.update({\n        title: newTitle,\n    })\n}\n\nexport const updateTaskStatusAPI = (\n    userId: string,\n    todoId: string,\n    taskId: string,\n    completed: boolean\n) => {\n    const tasksRef = firebase.database().ref(userId).child(todoId).child(taskId)\n    tasksRef.update({\n        completed: !completed,\n    })\n}\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport s from \"./TaskModal.module.scss\";\nimport { addTaskAPI } from \"../../api/addTaskAPI\";\nimport { deleteTaskAPI } from \"../../api/deleteTaskAPI\";\nimport {\n  updateTaskDescriptionAPI,\n  updateTaskTitleAPI\n} from \"../../api/updateTask\";\n\ntype TaskModalPropsType = {\n  showModal: (value: boolean) => void\n  title: number | string\n  todoId: string\n  taskTitle?: string\n  subTitle?: string\n  taskId?: string\n  btnTitle: string\n  change: boolean\n  userId: string\n}\n\nconst TaskModal: React.FC<TaskModalPropsType> = React.memo((props) => {\n  const {\n    title,\n    showModal,\n    todoId,\n    taskTitle,\n    btnTitle,\n    taskId,\n    subTitle,\n    change,\n    userId\n  } = props;\n\n  const [text, setText] = useState<string>(taskTitle ?? \"\");\n  const [date, setDate] = useState<string>(todoId ?? \"\");\n  const [description, setDescription] = useState<string>(subTitle ?? \"\");\n  const [editMode, setEditMode] = useState<boolean>(!change);\n\n  const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\n    setText(e.currentTarget.value);\n  const textareaChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) =>\n    setDescription(e.currentTarget.value);\n  const onBlurHandler = () => change && setEditMode(false);\n  const doubleClickHandler = () => setEditMode(!editMode);\n  const dateChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\n    setDate(e.currentTarget.value);\n\n  const addTaskForDay = async () => {\n    if (date === todoId) {\n      if (change) {\n        await updateTaskTitleAPI(userId, todoId, taskId ?? \"\", text);\n        await updateTaskDescriptionAPI(\n          userId,\n          todoId,\n          taskId ?? \"1\",\n          description\n        );\n      } else {\n        await addTaskAPI(userId, todoId, text, description);\n      }\n    } else {\n      change && (await deleteTaskAPI(userId, todoId, taskId ?? \"\"));\n      await addTaskAPI(userId, date, text, description);\n    }\n    showModal(false);\n  };\n\n  const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) =>\n    e.key === \"Enter\" && addTaskForDay();\n\n  return (\n    <>\n      <div className={s.background} onClick={() => showModal(false)} />\n      <div className={s.modal}>\n        <div className={s.closeModal} onClick={() => showModal(false)}>\n          X\n        </div>\n        <div className={s.modal_container}>\n          {title && <h4>{title}</h4>}\n          <input\n            autoFocus\n            className={s.taskInput}\n            placeholder=\"Enter Task...\"\n            onChange={inputChangeHandler}\n            onKeyDown={onKeyDownHandler}\n            value={text}\n            type=\"text\"\n          />{text.trim().length > 20 &&\n        <span className={s.error}>Must be less than 20 symbols!</span>}\n          {editMode ? (\n            <textarea\n              onBlur={onBlurHandler}\n              onChange={textareaChangeHandler}\n              value={description}\n              className={`${s.subTitle}`}\n            />\n          ) : (\n            <div\n              onDoubleClick={doubleClickHandler}\n              className={`${s.subTitle}`}\n            >\n              {description}\n            </div>\n          )}\n          <input\n            className={s.taskInput}\n            onChange={dateChangeHandler}\n            value={date}\n            type=\"date\"\n          />\n          <button\n            disabled={!text.trim() || text.trim().length > 20}\n            className={s.button}\n            onClick={() => addTaskForDay()}\n          >\n            {btnTitle}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default TaskModal;\n","import React, { useState } from \"react\";\nimport s from \"../Taskbar.module.scss\";\nimport TaskModal from \"../../../TaskModal/TaskModal\";\nimport { deleteTaskAPI } from \"../../../../api/deleteTaskAPI\";\nimport { updateTaskStatusAPI } from \"../../../../api/updateTask\";\n\ntype TaskPropsType = {\n  taskId: string\n  title: string\n  todoId: string\n  completed: boolean\n  subTitle: string\n  userId: string\n}\n\nconst Task: React.FC<TaskPropsType> = React.memo((props) => {\n  const { taskId, title, todoId, completed, subTitle, userId } = props;\n\n  const [showTaskModal, setShowTaskModal] = useState<boolean>(false);\n\n  return (\n    <li>\n      <div className={s.task}>\n        <div className={s.labelWrapper}>\n          <label className={s.labelCheckbox}>\n            <input\n              defaultChecked={completed}\n              onChange={() =>\n                updateTaskStatusAPI(\n                  userId,\n                  todoId,\n                  taskId,\n                  completed\n                )\n              }\n              type=\"checkbox\"\n              className={s.checkInput}\n              id={taskId}\n            />\n            <span className={s.checkbox} />\n            <span\n              className={`${s.labelText} ${\n                completed && s.completed\n              }`}\n            >\n                            {title}\n                        </span>\n          </label>\n        </div>\n        <div>\n          <img\n            onClick={() => setShowTaskModal(true)}\n            src=\"/change.png\"\n            alt=\"\"\n          />\n          <img\n            onClick={() => deleteTaskAPI(userId, todoId, taskId)}\n            className={s.bin}\n            src=\"/bin.png\"\n            alt=\"\"\n          />\n        </div>\n      </div>\n      {showTaskModal && (\n        <TaskModal\n          userId={userId}\n          change\n          taskId={taskId}\n          btnTitle=\"Change Task\"\n          showModal={setShowTaskModal}\n          taskTitle={title}\n          title=\"Change Task\"\n          subTitle={subTitle}\n          todoId={todoId}\n        />\n      )}\n    </li>\n  );\n});\n\nexport default Task;\n","import s from './Preloader.module.scss'\n\nconst Preloader = () => {\n    return <div className={s.preloader} />\n}\n\nexport default Preloader\n","import React, { useEffect, useState } from 'react'\nimport { CURRENT_YEAR } from '../../../constants'\nimport s from './Taskbar.module.scss'\nimport Task from './Task/Task'\nimport TaskModal from '../../TaskModal/TaskModal'\nimport { getTasksAPI } from '../../../api/getTasksAPI'\nimport Preloader from '../../Preloder/Preloader'\n\ntype TaskbarPropsType = {\n    dayNumber: number\n    month: number\n    userId: string\n}\n\nexport type tasksType = {\n    id: string\n    completed: boolean\n    title: string\n    description: string\n    userId: string\n}\n\nconst Taskbar: React.FC<TaskbarPropsType> = React.memo(\n    ({ dayNumber, month, userId }) => {\n        const todoId = `${CURRENT_YEAR.toString()}-${`0${month}`.slice(\n            -2\n        )}-${`0${dayNumber}`.slice(-2)}`\n        const [\n            showTaskModalFromTaskbar,\n            setShowTaskModalFromTaskbar,\n        ] = useState<boolean>(false)\n        const [preloader, setPreloader] = useState<boolean>(false)\n        const [currentTasks, setCurrentTasks] = useState<tasksType[]>([])\n\n        useEffect(() => {\n            const { tasksRef, valueListenerHandler } = getTasksAPI(\n                userId,\n                setCurrentTasks,\n                todoId,\n                setPreloader\n            )\n            return () => {\n                tasksRef.off('value', valueListenerHandler)\n            }\n        }, [todoId, userId])\n\n        return (\n            <>\n                <div className={s.taskbar_wrapper}>\n                    {preloader ? (\n                        <Preloader />\n                    ) : (\n                        <>\n                            <div>\n                                <p>\n                                    Day\n                                    <span> {dayNumber} </span>\n                                    Tasks\n                                </p>\n                                <ul>\n                                    {currentTasks.map((t) => (\n                                        <Task\n                                            key={t.id}\n                                            userId={t.userId}\n                                            todoId={todoId}\n                                            taskId={t.id}\n                                            title={t.title}\n                                            completed={t.completed}\n                                            subTitle={t.description}\n                                        />\n                                    ))}\n                                </ul>\n                            </div>\n                            <button\n                                className={s.addTaskBtn}\n                                onClick={() =>\n                                    setShowTaskModalFromTaskbar(true)\n                                }\n                            >\n                                Add task\n                            </button>\n                        </>\n                    )}\n                </div>\n                {showTaskModalFromTaskbar && (\n                    <TaskModal\n                        userId={userId}\n                        change={false}\n                        btnTitle=\"Add Task\"\n                        todoId={todoId}\n                        title={`${dayNumber} Day`}\n                        showModal={setShowTaskModalFromTaskbar}\n                    />\n                )}\n            </>\n        )\n    }\n)\n\nexport default Taskbar\n","import firebase from 'firebase/compat'\nimport { tasksType } from '../components/Block/TaskBar/Taskbar'\n\nexport const getTasksAPI = (\n    userId: string,\n    setCurrentTasks: (tasks: tasksType[]) => void,\n    todoId: string,\n    setPreloader: (value: boolean) => void\n) => {\n    setPreloader(true)\n\n    const snapHandler = (snapshot: any) => {\n        if (snapshot.val()) {\n            setCurrentTasks(Object.values(snapshot.val()))\n        } else {\n            setCurrentTasks([])\n        }\n        setPreloader(false)\n    }\n\n    const tasksRef = firebase.database().ref(`${userId}/${todoId}`)\n    tasksRef.on('value', snapHandler)\n\n    return { tasksRef, valueListenerHandler: snapHandler }\n}\n","import React from 'react'\nimport s from '../Calendar/Calendar.module.scss'\n\ntype ArrowPropsType = {\n    imgSrc: string\n    way: number\n    setMonth: (val: number) => void\n    month: number\n    setYear: (val: number) => void\n    year: number\n}\n\nconst Arrow: React.FC<ArrowPropsType> = React.memo((props) => {\n    const { imgSrc, way, setMonth, setYear, month, year } = props\n\n    const changeMonth = () => {\n        if (month + way === 0) {\n            setMonth(12)\n            setYear(year - 1)\n        } else if (month + way === 13) {\n            setYear(year + 1)\n            setMonth(1)\n        } else {\n            setMonth(month + way)\n        }\n    }\n\n    return (\n        <img\n            onClick={changeMonth}\n            className={s.arrow}\n            src={imgSrc}\n            alt=\"Стрела\"\n        />\n    )\n})\n\nexport default Arrow\n","import { getAuth, onAuthStateChanged } from 'firebase/auth'\n\nexport const getAuthUserAPI = async () => {\n    let userId = ''\n    const auth = await getAuth()\n    await onAuthStateChanged(auth, (user) => {\n        if (user) {\n            userId = user.uid\n        }\n    })\n    return userId\n}\n\nexport const getUserId = async (setUserId: (useId: string) => void) => {\n    const userId = await getAuthUserAPI()\n    setUserId(userId)\n}\n","import firebase from 'firebase/compat'\nimport { tasksType } from '../components/Block/TaskBar/Taskbar'\n\nexport const getTasksWithDates = async (\n    userId: string,\n    setTasks: (value: tasksType | []) => void\n) => {\n    let tasks\n\n    const tasksRef = await firebase.database().ref(userId)\n\n    await tasksRef.on('value', (snap) => {\n        if (snap.val()) {\n            tasks = snap.val()\n            setTasks(tasks)\n        } else {\n            setTasks([])\n        }\n    })\n    return tasks\n}\n","import IRoute from '../interfaces/route'\nimport ForgotPasswordPage from '../pages/auth/ForgotPasswordPage'\nimport LoginPage from '../pages/auth/LoginPage'\nimport LogoutPage from '../pages/auth/LogoutPage'\nimport RegisterPage from '../pages/auth/RegisterPage'\nimport Calendar from '../components/Calendar/Calendar'\n\nconst routes: IRoute[] = [\n    {\n        path: '/',\n        exact: true,\n        component: Calendar,\n        name: 'Home Page',\n        protected: true,\n    },\n    {\n        path: '/register',\n        exact: true,\n        component: RegisterPage,\n        name: 'Register Page',\n        protected: false,\n    },\n    {\n        path: '/login',\n        exact: true,\n        component: LoginPage,\n        name: 'Login Page',\n        protected: false,\n    },\n    {\n        path: '/logout',\n        exact: true,\n        component: LogoutPage,\n        name: 'Logout Page',\n        protected: true,\n    },\n    {\n        path: '/forget',\n        exact: true,\n        component: ForgotPasswordPage,\n        name: 'Forgot Password Page',\n        protected: false,\n    },\n]\n\nexport default routes\n","import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport IPageProps from '../../interfaces/page'\nimport DayBlock from '../Block/DayBlock/DayBlock'\nimport Taskbar from '../Block/TaskBar/Taskbar'\nimport { CURRENT_YEAR, findMonthName, TODAY } from '../../constants'\nimport s from './Calendar.module.scss'\nimport Arrow from '../Arrow/Arrow'\nimport { getUserId } from '../../api/authentication'\nimport { getTasksWithDates } from '../../api/getTasksWithDates'\n\nconst Calendar: React.FC<IPageProps> = React.memo(() => {\n    const [userId, setUserId] = useState<string>('')\n    const [tasksFromDate, setTasksFromDate] = useState<any>({})\n\n    useEffect(() => {\n        getUserId(setUserId)\n    }, [])\n\n    useEffect(() => {\n        userId && getTasksWithDates(userId, setTasksFromDate)\n    }, [userId])\n\n    const [month, setMonth] = useState<number>(new Date().getMonth() + 1)\n    const [year, setYear] = useState<number>(CURRENT_YEAR)\n\n    const [dayNumber, setDayNumber] = useState<number>(TODAY)\n\n    const getDaysInMonth = () => new Date(year, month, 0).getDate()\n\n    const arrayOfDates = []\n    for (let i = 1; i <= getDaysInMonth(); i++) {\n        arrayOfDates.push(\n            `${year.toString()}-${`0${month}`.slice(-2)}-${`0${i}`.slice(-2)}`\n        )\n    }\n\n    const dayBlockItems = arrayOfDates.map((date) => {\n        let redPin\n        let greenPin\n        const dayTask = tasksFromDate[date]\n        if (dayTask) {\n            redPin = Object.values(dayTask).some((el: any) => !el.completed)\n            greenPin = Object.values(dayTask).some((el: any) => el.completed)\n        }\n        return (\n            <DayBlock\n                selectedDay={dayNumber}\n                redPin={redPin ?? false}\n                greenPin={greenPin ?? false}\n                userId={userId}\n                month={month}\n                setDayNumber={setDayNumber}\n                key={date}\n                date={date}\n            />\n        )\n    })\n    return (\n        <div className={s.homePage_wrapper}>\n            <div className={s.calendar_title}>\n                Calendar\n                <span>{`${findMonthName(month)}  ${year}`}</span>\n                <span>\n                    <Link to=\"/logout\">logout</Link>\n                </span>\n            </div>\n            <div className={s.days_wrapper}>\n                <Arrow\n                    year={year}\n                    setYear={setYear}\n                    month={month}\n                    setMonth={setMonth}\n                    way={-1}\n                    imgSrc=\"leftArrow.png\"\n                />\n                {dayBlockItems}\n                <Arrow\n                    year={year}\n                    setYear={setYear}\n                    month={month}\n                    setMonth={setMonth}\n                    way={1}\n                    imgSrc=\"rightArrow.png\"\n                />\n            </div>\n            {dayNumber && (\n                <Taskbar userId={userId} month={month} dayNumber={dayNumber} />\n            )}\n        </div>\n    )\n})\n\nexport default Calendar\n","import React, { useEffect, useState } from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom'\nimport { Spinner } from 'reactstrap'\nimport AuthRoute from './components/AuthRoute/AuthRoute'\nimport { auth } from './config/firebase'\nimport routes from './config/routes'\n\nexport interface IApplicationProps {}\n\nconst App: React.FC<IApplicationProps> = (props) => {\n    const [loading, setLoading] = useState<boolean>(true)\n\n    useEffect(() => {\n        auth.onAuthStateChanged((user) => {\n            setLoading(false)\n        })\n    }, [])\n\n    if (loading) return <Spinner color=\"info\" />\n\n    return (\n        <div>\n            <Switch>\n                {routes.map((route, index) => (\n                    <Route\n                        key={index}\n                        path={route.path}\n                        exact={route.exact}\n                        render={(routeProps: RouteComponentProps<any>) => {\n                            if (route.protected) {\n                                return (\n                                    <AuthRoute>\n                                        <route.component {...routeProps} />\n                                    </AuthRoute>\n                                )\n                            }\n                            return <route.component {...routeProps} />\n                        }}\n                    />\n                ))}\n            </Switch>\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {HashRouter} from 'react-router-dom'\nimport App from './App'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\nrequire('dotenv').config()\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}